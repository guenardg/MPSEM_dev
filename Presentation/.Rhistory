value = data.frame(time = seq(0,5.0,0.01))
)
dbDisconnect(OUsim)
SQLite() %>%
dbConnect(
"OUsim.sqlite"
) -> OUsim
## dbListTables(OUsim)
## dbDisconnect(OUsim)
dbWriteTable(
conn = OUsim,
name = "time",
value = data.frame(time = seq(0,5.0,0.01))
)
data.frame(
alpha = c(0,0.1,0.2,0.5,1,2,5,10),
sigma = 1,
from = 0,
opt = 0
) %>%
dbWriteTable(
conn = OUsim,
name = "cnd",
value = .
)
OUsim %>%
dbExecute(
"CREATE TABLE res (
time              INTEGER NOT NULL,
sim               NITEGER NOT NULL,
cnd               INTEGER NOT NULL,
value             REAL,
FOREIGN KEY(cnd)  REFERENCES cnd(rowid),
FOREIGN KEY(time) REFERENCES time(rowid)
)"
)
OUsim %>%
dbExecute(
"CREATE TABLE kdmap (
cnd              INTEGER NOT NULL,
map              BLOB,
FOREIGN KEY(cnd) REFERENCES cnd(rowid)
)"
)
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM cnd"
) -> cnd
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM time"
) -> x
i=1L
## j=1L
for(j in 1L:1000L)
OUEvolve(
x = x$time,
from = cnd$from[i],
opt = cnd$opt[i],
alpha = cnd$alpha[i],
sigma = cnd$sigma[i]
) %>%
data.frame(
sim = j,
cnd = i,
time = x$rowid,
value = .
) %>%
{sprintf("(%d,%d,%d,%f)",.$sim,.$cnd,.$time,.$value)} %>%
paste(collapse=",\n") %>%
sprintf(
"INSERT INTO res (sim,cnd,time,value) VALUES %s",
.
) %>%
dbExecute(OUsim,.)
dbDisconnect(OUsim)
SQLite() %>%
dbConnect(
"OUsim.sqlite"
) -> OUsim
dbWriteTable(
conn = OUsim,
name = "time",
value = data.frame(time = seq(0,5.0,0.01))
)
data.frame(
alpha = c(0,0.1,0.2,0.5,1,2,5,10),
sigma = 1,
from = 0,
opt = 0
) %>%
dbWriteTable(
conn = OUsim,
name = "cnd",
value = .
)
OUsim %>%
dbExecute(
"CREATE TABLE res (
time              INTEGER NOT NULL,
sim               NITEGER NOT NULL,
cnd               INTEGER NOT NULL,
value             REAL,
FOREIGN KEY(cnd)  REFERENCES cnd(rowid),
FOREIGN KEY(time) REFERENCES time(rowid)
)"
)
dbDisconnect(OUsim)
SQLite() %>%
dbConnect(
"OUsim.sqlite"
) -> OUsim
dbWriteTable(
conn = OUsim,
name = "time",
value = data.frame(time = seq(0,5.0,0.01))
)
data.frame(
alpha = c(0,0.1,0.2,0.5,1,2,5,10),
sigma = 1,
from = 0,
opt = 0
) %>%
dbWriteTable(
conn = OUsim,
name = "cnd",
value = .
)
OUsim %>%
dbExecute(
"CREATE TABLE res (
sim               NITEGER NOT NULL,
time              INTEGER NOT NULL,
cnd               INTEGER NOT NULL,
value             REAL,
FOREIGN KEY(cnd)  REFERENCES cnd(rowid),
FOREIGN KEY(time) REFERENCES time(rowid)
)"
)
OUsim %>%
dbExecute(
"CREATE TABLE kdmap (
cnd              INTEGER NOT NULL,
map              BLOB,
FOREIGN KEY(cnd) REFERENCES cnd(rowid)
)"
)
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM cnd"
) -> cnd
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM time"
) -> x
i=1L
j=1L
OUEvolve(
x = x$time,
from = cnd$from[i],
opt = cnd$opt[i],
alpha = cnd$alpha[i],
sigma = cnd$sigma[i]
)
data.frame(
sim = j,
cnd = i,
time = x$rowid,
value = .
)
OUEvolve(
x = x$time,
from = cnd$from[i],
opt = cnd$opt[i],
alpha = cnd$alpha[i],
sigma = cnd$sigma[i]
) %>%
data.frame(
sim = j,
cnd = i,
time = x$rowid,
value = .
)
dbDisconnect(OUsim)
SQLite() %>%
dbConnect(
"OUsim.sqlite"
) -> OUsim
dbWriteTable(
conn = OUsim,
name = "time",
value = data.frame(time = seq(0,5.0,0.01))
)
data.frame(
alpha = c(0,0.1,0.2,0.5,1,2,5,10),
sigma = 1,
from = 0,
opt = 0
) %>%
dbWriteTable(
conn = OUsim,
name = "cnd",
value = .
)
OUsim %>%
dbExecute(
"CREATE TABLE res (
cnd               INTEGER NOT NULL,
sim               NITEGER NOT NULL,
time              INTEGER NOT NULL,
value             REAL,
FOREIGN KEY(cnd)  REFERENCES cnd(rowid),
FOREIGN KEY(time) REFERENCES time(rowid)
)"
)
OUsim %>%
dbExecute(
"CREATE TABLE kdmap (
cnd              INTEGER NOT NULL,
map              BLOB,
FOREIGN KEY(cnd) REFERENCES cnd(rowid)
)"
)
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM cnd"
) -> cnd
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM time"
) -> x
i=1L
j=1L
OUEvolve(
x = x$time,
from = cnd$from[i],
opt = cnd$opt[i],
alpha = cnd$alpha[i],
sigma = cnd$sigma[i]
) %>%
data.frame(
cnd = i,
sim = j,
time = x$rowid,
value = .
) %>%
{sprintf("(%d,%d,%d,%f)",.$cnd,.$sim,.$time,.$value)} %>%
paste(collapse=",\n") %>%
sprintf(
"INSERT INTO res (cnd,sim,time,value) VALUES %s",
.
) %>%
dbExecute(OUsim,.)
dbDisconnect(OUsim)
SQLite() %>%
dbConnect(
"OUsim.sqlite"
) -> OUsim
dbWriteTable(
conn = OUsim,
name = "time",
value = data.frame(time = seq(0,5.0,0.01))
)
data.frame(
alpha = c(0,0.1,0.2,0.5,1,2,5,10),
sigma = 1,
from = 0,
opt = 0
) %>%
dbWriteTable(
conn = OUsim,
name = "cnd",
value = .
)
OUsim %>%
dbExecute(
"CREATE TABLE res (
cnd               INTEGER NOT NULL,
sim               NITEGER NOT NULL,
time              INTEGER NOT NULL,
value             REAL,
FOREIGN KEY(cnd)  REFERENCES cnd(rowid),
FOREIGN KEY(time) REFERENCES time(rowid)
)"
)
OUsim %>%
dbExecute(
"CREATE TABLE kdmap (
cnd              INTEGER NOT NULL,
map              BLOB,
FOREIGN KEY(cnd) REFERENCES cnd(rowid)
)"
)
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM cnd"
) -> cnd
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM time"
) -> x
i=1L
## j=1L
for(j in 1L:1000L)
OUEvolve(
x = x$time,
from = cnd$from[i],
opt = cnd$opt[i],
alpha = cnd$alpha[i],
sigma = cnd$sigma[i]
) %>%
data.frame(
cnd = i,
sim = j,
time = x$rowid,
value = .
) %>%
{sprintf("(%d,%d,%d,%f)",.$cnd,.$sim,.$time,.$value)} %>%
paste(collapse=",\n") %>%
sprintf(
"INSERT INTO res (cnd,sim,time,value) VALUES %s",
.
) %>%
dbExecute(OUsim,.)
dbDisconnect(OUsim)
SQLite() %>%
dbConnect(
"OUsim.sqlite"
) -> OUsim
dbWriteTable(
conn = OUsim,
name = "time",
value = data.frame(time = seq(0,5.0,0.01))
)
data.frame(
alpha = c(0,0.1,0.2,0.5,1,2,5,10),
sigma = 1,
from = 0,
opt = 0
) %>%
dbWriteTable(
conn = OUsim,
name = "cnd",
value = .
)
OUsim %>%
dbExecute(
"CREATE TABLE res (
cnd               INTEGER NOT NULL,
sim               NITEGER NOT NULL,
time              INTEGER NOT NULL,
value             REAL,
FOREIGN KEY(cnd)  REFERENCES cnd(rowid),
FOREIGN KEY(time) REFERENCES time(rowid)
)"
)
OUsim %>%
dbExecute(
"CREATE TABLE kdmap (
cnd              INTEGER NOT NULL,
map              BLOB,
FOREIGN KEY(cnd) REFERENCES cnd(rowid)
)"
)
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM cnd"
) -> cnd
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM time"
) -> x
## i=1L
for(i in cnd$rowid) {
## j=1L
for(j in 1L:10000L)
OUEvolve(
x = x$time,
from = cnd$from[i],
opt = cnd$opt[i],
alpha = cnd$alpha[i],
sigma = cnd$sigma[i]
) %>%
data.frame(
cnd = i,
sim = j,
time = x$rowid,
value = .
) %>%
{sprintf("(%d,%d,%d,%f)",.$cnd,.$sim,.$time,.$value)} %>%
paste(collapse=",\n") %>%
sprintf(
"INSERT INTO res (cnd,sim,time,value) VALUES %s",
.
) %>%
dbExecute(OUsim,.)
}
dbDisconnect(CCI)
rm(i,j)
dbDisconnect(OUsim)
SQLite() %>%
dbConnect(
"OUsim.sqlite"
) -> OUsim
dbWriteTable(
conn = OUsim,
name = "time",
value = data.frame(time = seq(0,5.0,0.01))
)
data.frame(
alpha = c(0,0.1,0.2,0.5,1,2,5,10),
sigma = 1,
from = 0,
opt = 0
) %>%
dbWriteTable(
conn = OUsim,
name = "cnd",
value = .
)
OUsim %>%
dbExecute(
"CREATE TABLE res (
cnd               INTEGER NOT NULL,
sim               NITEGER NOT NULL,
time              INTEGER NOT NULL,
value             REAL,
FOREIGN KEY(cnd)  REFERENCES cnd(rowid),
FOREIGN KEY(time) REFERENCES time(rowid)
)"
)
OUsim %>%
dbExecute(
"CREATE TABLE kdmap (
cnd              INTEGER NOT NULL,
map              BLOB,
FOREIGN KEY(cnd) REFERENCES cnd(rowid)
)"
)
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM cnd"
) -> cnd
OUsim %>%
dbGetQuery(
"SELECT ROWID, * FROM time"
) -> x
## i=1L
for(i in cnd$rowid) {
## j=1L
for(j in 1L:1000L)
OUEvolve(
x = x$time,
from = cnd$from[i],
opt = cnd$opt[i],
alpha = cnd$alpha[i],
sigma = cnd$sigma[i]
) %>%
data.frame(
cnd = i,
sim = j,
time = x$rowid,
value = .
) %>%
{sprintf("(%d,%d,%d,%f)",.$cnd,.$sim,.$time,.$value)} %>%
paste(collapse=",\n") %>%
sprintf(
"INSERT INTO res (cnd,sim,time,value) VALUES %s",
.
) %>%
dbExecute(OUsim,.)
}
rm(i,j)
##
dbExecute(OUsim, "CREATE INDEX res_cnd ON res(cnd)")
dbExecute(OUsim, "CREATE INDEX res_sim ON res(sim)")
dbExecute(OUsim, "CREATE INDEX res_time ON res(time)")
OUsim %>%
dbGetQuery(
"SELECT value
FROM res
WHERE cnd = 1 AND sim = 1
ORDER time
"
)
OUsim %>%
dbGetQuery(
"SELECT value
FROM res
WHERE cnd = 1 AND sim = 1
ORDER BY time
"
)
sprintf(
"SELECT value
FROM res
WHERE cnd = %d AND sim = %d
ORDER BY time",
1L,
1L
)
OUsim %>%
dbGetQuery(
sprintf(
"SELECT value
FROM res
WHERE cnd = %d AND sim = %d
ORDER BY time",
1L,
1L
)
)
