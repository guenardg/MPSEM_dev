%% LyX 2.3.4.2 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[canadian]{article}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage[authoryear]{natbib}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Phylogenetic modelling in R}

\makeatother

\usepackage{babel}
\begin{document}
\title{A phylogenetic modelling tutorial using Phylogenetic Eigenvector Maps
(PEM) as implemented in R package MPSEM ($0.4$-$1$).}
\author{Guillaume Gu√©nard}

\maketitle
\tableofcontents{}

\section{Introduction}

Phylogenetic Eigenvector Mapping (PEM) is a method to perform phylogenetic
modelling. Phylogenetic modelling consists in modelling trait evolution
and predicting trait values using the phylogeny as an explanatory factor
\citep{Guenard2013}. Phylogenetic modelling allows one to predict
trait values when it is difficult or impractical to obtain them, for
instance when species are rare, extinct, or when information is needed
for several species and trait values are only available for a relatively
small number of them \citep{Guenard2011,Guenard2014}.

Phylogenetic eigenvector maps are actually a set of eigenfunctions describing the structure of a phylogenetic graph, which represents either a Darwinian phylogenetic tree or a reticulated tree, i.e. a phylogenetic tree with reticulations.

To apply phylogenetic modelling, one needs to have a set of species
with known phylogeny and trait values (referred to as the
``model species''), and to know the locations, with respect
to the models species phylogeny, of the species for which trait
values are being predicted (referred to as the ``target
species''). Phylogenetic modelling can be carried out conjointly with
trait correlation modelling: it is possible to use other traits with
known (or estimable) values for the target species to help predict
a trait of interest. Phylogenetic trees being acyclic graphs, terms pertaining 
to graph theory will be used in this vignette instead of terms phylogeneticists
may be more familiar with. In particular, ``edge'' will be used instead of 
``branches'', and ``vertex'' instead of ``root'', ``node'' or ``tip'', except in
cases where it is necessary to be specific about what a vertex represents.

The PEM work flow consists in 1) calculating the influence matrix
of the graph, 2) specifying a model of trait evolution along the edges
of the phylogenetic tree, 3) calculating the left eigenvectors of
the weighted and centred influence matrix and 4) using these eigenvectors
as descriptors \citep{Guenard2013}. 

An {\tt R} implementation of
that approach is found in package {\tt MPSEM}. {\tt MPSEM} is meant
to make the aforementioned process as seamless as possible. It is
a work in progress; researchers are welcome to provide relevant suggestions
and constructive remarks aimed at making {\tt MPSEM} a better, more
efficient and user-friendly interface to phylogenetic modelling.

Assuming package {\tt MPSEM} is installed, the first step to calculate
a PEM is to load package {\tt MPSEM}, which depends on packages {\tt ape}
and {\tt MASS}:

<<load_package>>=
library(MPSEM)
@

\section{Preparing the data}

For the present tutorial, we will use the data set {\tt perissodactyla}
from the R package {\tt caper}. These data, from \citet{Purvis1995}, are
loaded into the {\tt R} workspace as follows:

<<load_data>>=
data(perissodactyla,package="caper")
@

The {\tt perissodactyla} data set contains element {\tt perissodactyla.tree},
a phylogenetic tree encompassing \Sexpr{length(perissodactyla.tree$tip.label)}
odd-toed ungulate species:

<<plot_phylogeny,echo=FALSE,fig.height=4.5>>=
plot(perissodactyla.tree)
@

as well as element {\tt perissodactyla.data}, a data frame containing trait
information about the species. For the present study we will model
the $\log_{10}$ gestation weight as a function of phylogeny and $\log_{10}$
adult female weight:

<<data_table,results="asis",echo=FALSE>>=
library(xtable)
xtable(perissodactyla.data[,c(1L,2L,4L)])
@

Before going ahead, it is important to make sure that the species
in the tree object are the same and presented in the same order as
those in the data table. Glancing at the data table, species clearly
cannot match since the latter feature information for only \Sexpr{nrow(perissodactyla.data)}
of the \Sexpr{length(perissodactyla.tree$tip.label)} species in the
tree. We will therefore match the tip labels of the original tree
in the data table using the binomial (Latin) species names in a character
vector {\tt spmatch}. When no matching element from the data table
is found, an {\tt NA} value appears at the corresponding position
in {\tt spmatch}. We can therefore use these {\tt NA}s to reference
the species that can be dropped from the tree using {\tt ape}'s function
{\tt drop.tip()} as follows:

<<droping_species>>=
spmatch <- match(perissodactyla.tree$tip.label,
                 perissodactyla.data[,1L])
perissodactyla.tree <- drop.tip(perissodactyla.tree,
                  perissodactyla.tree$tip.label[is.na(spmatch)])
@

Now that the data match the tree in content, one needs to verify whether
they do so in order.

<<check_order>>=
cbind(perissodactyla.tree$tip.label,perissodactyla.data[,1L])
@

Since they do not, we need to recalculate {\tt spmatch} with the
new, reduced tree and re-order the data accordingly.

<<re-order_species>>=
spmatch <- match(perissodactyla.tree$tip.label,
                 perissodactyla.data[,1L])
perissodactyla.data <- perissodactyla.data[spmatch,]
all(perissodactyla.tree$tip.label==perissodactyla.data[,1L])
@

The last code line provides a last check to guarantee that all species
names are matching. As a last step before we are done with data manipulation,
the row names are replaced by Latin names and the table's first row is deleted:

<<change_rownames>>=
rownames(perissodactyla.data) <- perissodactyla.data[,1L]
perissodactyla.data <- perissodactyla.data[,-1L]
@

Our data of interest now appear as follows:

<<re-arranged_data,results="asis",echo=FALSE>>=
xtable(perissodactyla.data[,c(1L,3L)])
@

Finally, for the sake of demonstrating how to obtain predictions,
the Sumatran rhinoceros (\emph{Dicerorhinus sumatrensis}, the species at the top 
of the table) is designated as the target species and it is placed in the test 
data set {\tt perissodactyla.test}. The remaining 12 species are the model species; 
they are placed in the training data set {\tt perissodactyla.train}:

<<training_testing_datasets>>=
perissodactyla.train <- perissodactyla.data[-1L,,drop=FALSE]
perissodactyla.test <- perissodactyla.data[1L,,drop=FALSE]
perissodactyla.tree.train <- drop.tip(perissodactyla.tree,
                             tip="Dicerorhinus sumatrensis")
@

\section{Calculating PEM}

\subsection{Edge weighting function}

As previously announced, the vocabulary of graph theory will be used
in the description of PEM modelling: a tree is a (directed) graph, a branch is 
an \emph{edge}, and the root, nodes, and tips are \emph{vertices}. PEM allows 
one to specify a model of trait evolution along the edges of the tree. 

That model is written in section 3.3 by function {\tt PEM.build()}, which has edge 
lengths as its first argument, followed by an arbitrary number of parameters provided as named arguments. Although the PEM method would allow one to specify different parameter sets for different parts of the phylogeny as well as arbitrary weighting functions, the
current implementation of {\tt MPSEM} ($0.3-6$) only supports the
following power function:
\[
w_{a,\psi}(\phi_{j})=\begin{cases}
\psi\phi^{\frac{1-a}{2}} & \phi_{j}>0\\
0 & \phi_{j}=0,
\end{cases}
\]
where $a$ is the steepness parameter describing how abrupt are the changes
in trait values with time following branching, $\psi$ is the
evolution rate of the trait, and $\phi_{j}$ is the length of edge
$j$
\begin{figure}
<<display_weighting,echo=FALSE,fig.height=5>>=
par(mar=c(4.5,4.5,1,7)+0.1)
d <- seq(0,2,length.out=1000)
a <- c(0,0.33,0.67,1,0.25,0.75,0)
psi <- c(1,1,1,1,0.65,0.65,0.4)
cc <- c(1,1,1,1,1,1,1)
ll <- c(1,2,2,2,3,3,3)
trial <- cbind(a,psi)
colnames(trial) <- c("a","psi")
ntrials <- nrow(trial)
nd <- length(d)
w <- matrix(NA,ntrials,nd,dimnames=list(paste("a=",trial[,"a"],", psi=",trial[,"psi"],sep=""),
                                        paste("d=",round(d,4),sep="")))
for(i in 1:ntrials)
  w[i,] <- MPSEM::PEMweights(d,trial[i,"a"],trial[i,"psi"])
plot(NA,xlim=c(0,2),ylim=c(0,1.6),ylab=expression(paste(italic(w[list(italic(a),psi)]),~(phi))),
  xlab=expression(paste("Distance (",italic(phi),")",sep="")),axes=FALSE)
axis(1,at=seq(0,2,0.5),label=seq(0,2,0.5))
axis(2,las=1)
text(expression(paste(~~~a~~~~~~~psi)),x=2.2,y=1.57,xpd=TRUE,adj=0)
for(i in 1:ntrials) {
  lines(x=d,y=w[i,],col=cc[i],lty=ll[i])
  text(paste(sprintf("%.2f",trial[i,1]),sprintf("%.2f",trial[i,2]),sep="  "),
       x=rep(2.2,1),y=w[i,1000],xpd=TRUE,adj=0)
}
rm(d,a,psi,cc,ll,trial,ntrials,nd,w,i)
@

\caption{Values of the edge weighting function used to model of trait evolution
by {\tt MPSEM} for different values of steepness ($a$) and evolution
rate ($\psi$).\label{fig:Edge-weighting-function}}
\end{figure}
\citep{Guenard2013}. As the steepness parameter increases, the weight
assigned to a given edge increases more sharply with respect to the
phylogenetic distance (or evolutionary time; Fig. \ref{fig:Edge-weighting-function}).
In the context of PEM, the edge weight represents the relative rate
of evolution of the trait; the greater the edge weight, the greater
the trait change along that edge. When $a=0$, trait evolution is
neutral and therefore proceeds by random walk along the edges. When $a=1$,
edge weights no longer increase as a function of edge lengths. That
situation corresponds to the scenario in which trait evolution is
driven by the strongest possible natural selection: following a speciation
event, traits either change abruptly (directional selection) at the
vertex or do not change at all (stabilizing selection).

\subsection{Phylogenetic graph}

The first step in building a PEM model is to convert the phylogenetic tree 
to a phylogenetic graph. This is done by feeding the tree as argument to 
function {\tt Phylo2DirectedGraph()} as follows:

<<convert_to_graph>>=
perissodactyla.pgraph <- 
               Phylo2DirectedGraph(perissodactyla.tree.train)
@

Here is a snippet showing how the {\tt MPSEM} graph information is stored
by function {\tt Phylo2DirectedGraph()}:

<<graph_storage,echo=FALSE,size="tiny">>=
str(perissodactyla.pgraph)
@

This list contains two main elements, ``edge'' and ``vertex'', plus additional information. The ``edge'' and ``vertex'' elements each contain a list of sub-elements:
‚Ä¢ The element {\tt \$edge} is a list containing information about the graph edges,
namely the indices of their origin and destination vertices (the two
first unnamed elements) and an arbitrary number of supplementary elements
storing other edge properties. In the present case, a numeric vector
created by {\tt Phylo2DirectedGraph()} and called {\tt \$distance}
stores the phylogenetic distances ($\phi_{j}$), which correspond
to the branch lengths of the {\tt perissodactyla.tree}. 
‚Ä¢ The element {\tt \$vertex} is a list containing an arbitrary number of elements 
storing vertex properties. In the present example, a logical vector called 
{\tt \$species} stores whether a given vertex represents a species at the tip of 
a branch (TRUE) or not (FALSE). 
‚Ä¢ In addition to edge and vertex information, the function output file stores 
other useful information in the form of attributes:
{\tt ev} stores the number of edges and vertices, whereas {\tt elabel}
and {\tt vlabel} store edge and vertex labels, respectively.

\subsection{Building the eigenvector map}

PEM models are built using the function {\tt PEM.build()}.
As an example, let us assume that the steepness and evolution rate
are $a=0.25$ and $\psi=2$ among the species of genus \emph{Equus} and $a=0.8$ and
$\psi=0.5$ within genus \emph{Tapirus}. Let us further assume that $a=0$ and $\psi=1$ from
the root of the tree up to the vertex where genera \emph{Equus} and \emph{Tapirus}
differentiate, as well as among the remaining genera. The following figure will
help readers figure out the indices of the edges involved:

<<tree_labelled,fig.height=5>>=
tree <- perissodactyla.tree.train
tree$node.label <- paste("N",1L:tree$Nnode)
plot(tree,show.node.label=TRUE)
edgelabels(1L:nrow(tree$edge),
           edge=1L:nrow(tree$edge),bg="white",cex=0.75)
rm(tree)
@

Hence, $a=0.25$ and $\psi=2$ for edges $15-21$, $a=0.8$ and $\psi=0.5$
for edges $10-13$, and $a=0$ and $\psi=1$ for edges $1-9$ and
$14$:

<<set_param>>=
steepness <- rep(0,attr(perissodactyla.pgraph,"ev")[1L])
evol_rate <- rep(1,attr(perissodactyla.pgraph,"ev")[1L])
steepness[15L:21] <- 0.25
evol_rate[15L:21] <- 2
steepness[9L:13] <- 0.8
evol_rate[9L:13] <- 0.5
@

The PEM model is obtained as follows:

<<calculate_PEM>>=
perissodactyla.PEM <- PEM.build(perissodactyla.pgraph,
                                d="distance",sp="species",
                                a=steepness,psi=evol_rate)
@

In addition to the phylogenetic graph (first argument), function {\tt PEM.build()}
needs {\tt d}, the name of the ``edge'' element where the phylogenetic
distances are stored, {\tt sp}, the name of the ``vertex'' element specifying
which vertex is a terminal species, as well as the user-specified steepness
and evolution rate. When the vectors provided to {\tt a} or {\tt psi}
have smaller lengths than the number of edges, values are recycled.

The default values for {\tt d} and {\tt sp} are those produced by
{\tt Phylo2DirectedGraph()}; they can therefore be omitted in most
cases. The object that {\tt MPSEM} uses to store the PEM information
is rather complex in structure; we will not browse through it. Method
{\tt as.data.frame} can be applied to the {\tt PEM.build()} output object to extract the eigenvector of a PEM model: 

### Guillaume: j'√©cris ici comme dans la console R, pas en code LaTeX. Revoir SVP ###
eigen.vectors <- as.data.frame(perissodactyla.PEM)

### -----
Guillaume: est-il possible d'extraire les valeurs propres? Pourraient-elles √™tre utiles √† l'interpr√©tation? Par exemple, est-ce que les vecteurs qui ont les plus grandes valeurs propres devraient √™tre examin√©s en premier jusqu'√† un certain seuil, e.g. le b√¢ton bris√© ?

J'ai examin√© l'objet de sortie "str(perissodactyla.PEM)" et j'ai trouv√© l'√©l√©ment $d qui semble contenir les valeurs singuli√®res. Celles-ci pourraient √™tre les valeurs propres, ou leur racine carr√©e pourrait produire les valeurs propres. 

Oublie ma question si les valeurs propres ne sont d'aucune utilit√© en analyse PEM.
### -----

For a set of $n$ species, that method returns a matrix containing
$n-1$ column vectors that can be used in models to represent phylogenetic
structures in trait data. Here, we plot the phylogenetic patterns of variation described
by the first two eigenvectors of the PEM model computed above:

<<Eigenvector_example,fig.height=3.5,fig.width=4.5>>=
layout(matrix(c(1,1,1,2,2,3,3),1L,7L))
par(mar=c(5.1,2.1,4.1,2.1))
plot(perissodactyla.tree.train,x.lim=60,cex=0.75)
plot(y = 1L:nrow(perissodactyla.train), ylab="", xlab = "Loading",
     x = as.data.frame(perissodactyla.PEM)[,1L], xlim=0.5*c(-1,1),
     axes=FALSE, main = expression(bold(v)[1]))
axis(1) ; abline(v=0)
plot(y = 1L:nrow(perissodactyla.train), ylab="", xlab = "Loading",
     x = as.data.frame(perissodactyla.PEM)[,5L], xlim=0.5*c(-1,1),
     axes=FALSE, main = expression(bold(v)[5]))
axis(1) ; abline(v=0)
@

The pattern shown by the first eigenvector essentially contrasts Equids
with the other odd-toed ungulate species, whereas the pattern shown
by the second eigenvector essentially contrasts tapirs with Rhinocerotids.

\subsection{Estimate weighting parameters empirically}

It often happens that users do not have information about the best set of
weighting function parameters to use for modelling. For that reason, {\tt MPSEM} provides a function called {\tt PEM.fitSimple()} that allows them to empirically
estimate a single value of parameter $a$ for the whole phylogeny\footnote{Function {\tt PEM.fitSimple()} does not estimate parameter $\psi$
because the latter has no effect when its value is assumed to be constant
throughout the phylogeny.} using restricted maximum likelihood\footnote{A function to estimate different sets of weighting function parameters
for different portions of the phylogeny has yet to be included in
{\tt MPSEM}.}. That function requires a response variable that will be used to
optimize the steepness parameter (here the $\log_{10}$ neonate weight)
as well as the lower and upper bounds of the admissible parameter values.
That function is called as follows:

<<PEM_opt1>>=
perissodactyla.PEM_opt1 <- PEM.fitSimple(
                     y = perissodactyla.train[,"log.neonatal.wt"],
                     x = NULL,
                     w = perissodactyla.pgraph,
                     d = "distance", sp="species",
                     lower = 0, upper = 1)
@

If other traits are to be used in the model (here the $\log_{10}$
female weight), they are passed to argument {\tt x} of the function as follows:

<<PEM_opt2>>=
perissodactyla.PEM_opt2 <- PEM.fitSimple(
                     y = perissodactyla.train[,"log.neonatal.wt"],
                     x = perissodactyla.train[,"log.female.wt"],
                     w = perissodactyla.pgraph,
                     d = "distance", sp="species",
                     lower = 0, upper = 1)
@

These calls produce PEMs that are similar to those obtained
using {\tt PEM.build()}, with additional information resulting from
the optimization process. Note that the estimate of the steepness
parameter (stored as element {\tt \$optim\$par} in the PEM objects)
and also, consequently, the resulting phylogenetic eigenvectors, will be
different depending on the use of auxiliary traits. In the example
above, for instance, $a$ was estimated to be \Sexpr{round(perissodactyla.PEM_opt1$optim$par,2)}
by {\tt PEM.fitSimple()} when no auxiliary trait was involved (first
call) and to \Sexpr{round(perissodactyla.PEM_opt2$optim$par,2)} when
the female weight was used as an auxiliary trait (second call).

\subsection{Phylogenetic modelling}

To model trait values, PEMs are used as descriptors in other modelling
methods; any suitable method can be used. For instance, package {\tt MPSEM}
contains a utility function called {\tt lmforwardsequentialAICc()}
that does step-by-step forward variable selection in multiple regression analysis
on the basis of the corrected Akaike Information Criterion (AICc;
\citealp{Hurvich1993}):

<<build_PEM_models>>=
lm1 <- lmforwardsequentialAICc(
                     y = perissodactyla.train[,"log.neonatal.wt"],
                     object = perissodactyla.PEM_opt1)
summary(lm1)
lm2 <- lmforwardsequentialAICc(
            y = perissodactyla.train[,"log.neonatal.wt"],
            x = perissodactyla.train[,"log.female.wt",drop=FALSE],
            object = perissodactyla.PEM_opt2)
summary(lm2) 
@

Note that in the current version of {\tt MPSEM}, to pass a single auxiliary 
trait to {\tt lmforwardsequentialAICc()}, it is mandatory to set {\tt drop=FALSE}
to the bracket operator so that the variable name be conserved. Failure
to do so will preclude one to make predictions using the resulting
linear model. To obtain predictions, we need to calculate the locations
of the target species with respect to the phylogeny of the model species.
This is accomplished by {\tt getGraphLocations()}, to which we give
the tree for all species (model + target) and the names (or indices)
of the target species. Then, we use the {\tt predict()} method for
PEM objects. The latter takes, in addition to the PEM object, the
locations of the target species as obtained by {\tt getGraphLocations()},
an lm or glm object involving the eigenvectors of the PEM model, and a
table of auxiliary trait values for the target species, which can
be omitted if no auxiliary trait is used in the linear model.

<<make_prediction>>=    ### PL ici ###
perissodactyla.loc <- getGraphLocations(perissodactyla.tree,
                              targets="Dicerorhinus sumatrensis")
pred <- predict(object=perissodactyla.PEM_opt2,
                targets=perissodactyla.loc,
                lmobject=lm2,
                newdata=perissodactyla.test,
                "prediction",0.95)
@

Here, the predicted neonatal weight for the Sumatran rhinoceros is
\Sexpr{round((10^pred$values)/1000,1)}$\,\mathrm{kg}$ and the bounds
of the $95\%$ prediction interval are \Sexpr{round((10^pred$lower)/1000,1)}
and \Sexpr{round((10^pred$upper)/1000,1)}$\,\mathrm{kg}$, while
the observed value was actually \Sexpr{round((10^perissodactyla.test$log.neonatal.wt)/1000,1)}$\,\mathrm{kg}$.

\section{Cross-validating PEM predictions}

This section will show how to perform a leave-one-out cross-validation
of a data set using the {\tt R} code from the previous two sections.
Predictions will be added to table {\tt perissodactyla.data}:

<<cross-validation>>=
perissodactyla.data <- data.frame(perissodactyla.data,
                         predictions = NA, lower = NA, upper = NA)
jackinfo <- list()
for(i in 1L:nrow(perissodactyla.data)) {
  jackinfo[[i]] <- list()
  jackinfo[[i]][["loc"]] <- getGraphLocations(perissodactyla.tree,
                       targets = rownames(perissodactyla.data)[i])

  jackinfo[[i]][["PEM"]] <- PEM.fitSimple(
                    y = perissodactyla.data[-i,"log.neonatal.wt"],
                    x = perissodactyla.data[-i,"log.female.wt"],
                    w = jackinfo[[i]][["loc"]]$x)
  jackinfo[[i]][["lm"]] <- lmforwardsequentialAICc(
           y = perissodactyla.data[-i,"log.neonatal.wt"],
           x = perissodactyla.data[-i,"log.female.wt",drop=FALSE],
           object = jackinfo[[i]][["PEM"]])
  predictions <- predict(object = jackinfo[[i]][["PEM"]],
      targets = jackinfo[[i]][["loc"]],
      lmobject = jackinfo[[i]][["lm"]],
      newdata = perissodactyla.data[i,"log.female.wt",drop=FALSE],
      "prediction",0.95)
  perissodactyla.data[i, c("predictions", "lower", "upper")] <-
                      unlist(predictions)
} ; rm(i, predictions)
@

### Phrase originelle:
Because the result of {\tt getGraphLocations()} includes the phylogenetic graph with the target species removed has its element $x, it is not necessary to re-calculate the tree with the target species dropped and the phylogenetic graph as we did previously for explanatory purposes.
# ----- Essai de correction. Voir le fichier "Notes de PL" √† propos des L. 505-510.
Because the result of {\tt getGraphLocations()} includes the phylogenetic
graph without the target species \emph{Dicerorhinus sumatrensis}, which was 
removed from element {\tt \$tpall=perissodactyla.tree},
it is not necessary to re-calculate the tree with the target species
dropped, as well as the phylogenetic graph, as we did previously for explanatory
purposes. 
# -----
Also, the code above suggests to store the internal information about the
cross-validation steps into a list (called {\tt jackinfo} here), which preserves the possibility of accessing the many details of the analyses later on.
\begin{figure}
<<plot_pred_obs,echo=FALSE,fig.height=4,fig.width=4>>=
par(mar=c(5,5,2,2)+0.1)
rng <- range(perissodactyla.data[,"log.neonatal.wt"], perissodactyla.data[,c("predictions","lower","upper")])
plot(NA, xlim = rng, ylim = rng, xlab = "Predicted", ylab = "observed", asp = 1, las = 1)
points(x = perissodactyla.data[,"predictions"], y = perissodactyla.data[,"log.neonatal.wt"])
abline(0,1)
arrows(x0 = perissodactyla.data[,"lower"],x1 = perissodactyla.data[,"upper"],
       y0 = perissodactyla.data[,"log.neonatal.wt"],
       y1 = perissodactyla.data[,"log.neonatal.wt"],
       length = 0.05,angle = 90,code = 3)
@

\caption{Predicted and observed $\log_{10}$ neonatal body mass for \Sexpr{nrow(perissodactyla.data)}
odd-toed ungulate species.\label{fig:Predicted-and-observed}}
\end{figure}
This cross-validation analysis has predicted the ($\log$) neonatal
body mass of the 13 species under study with a cross-validated $R^{2}$ of \Sexpr{round(1-(sum((perissodactyla.data[,"predictions"]-perissodactyla.data[,"log.neonatal.wt"])**2)/nrow(perissodactyla.data))/var(perissodactyla.data[,"log.neonatal.wt"]),2)}.
The predicted and observed values are compared in Figure \ref{fig:Predicted-and-observed}.

\section{Other utility functions}

\subsection{Influence matrix}

The influence matrix is used internally to calculate PEM. It is a
matrix having as many rows as the number of vertices (species + nodes)
and as many columns as the number of edges. Any given element of the
influence matrix is coding whether a vertex, which is represented in
a row of the matrix, is influenced by an edge, represented by
a column of the matrix. In the context of PEM analysis, a vertex is influenced
by an edge when the former has ancestors on that edge or, in other
words, when an edge is on the path leading from a tip to the root
of the tree. The influence matrix is obtained as follows:

<<influence_matrix,echo=TRUE,eval=FALSE>>=
res <- PEMInfluence(perissodactyla.pgraph)
@

\subsection{Updated and forced PEM parameters}

The calculation of the influence matrix performed by {\tt PEM.build()}
for a given phylogenetic graph does not need to be done every time new weighting
function parameters are to be tried. For that reason, {\tt MPSEM}
provides a function called {\tt PEM.updater()}, which takes a previously
calculated PEM object, applies new edge weighting, and recalculates
the phylogenetic eigenvectors:

<<PEM_updater,echo=TRUE,eval=FALSE>>=
res <- PEM.updater(object = perissodactyla.PEM, a = 0, psi = 1)
@

The results of {\tt PEM.build()} and {\tt PEM.updater()} do not
contain all the information necessary to predict trait values. Indeed,
neither of these functions is provided information about the response
variable and auxiliary traits. To perform these preliminary calculations,
{\tt MPSEM} provides the user with function {\tt PEM.forcedSimple()},
which produces the same output as {\tt PEM.fitSimple()} with user-provided
values of the weighting parameters. It is called as follows:

<<forcedSimple,echo=TRUE,eval=FALSE>>=
res <- PEM.forcedSimple(
                    y = perissodactyla.train[,"log.neonatal.wt"],
                    x = perissodactyla.train[,"log.female.wt"],
                    w = perissodactyla.pgraph,
                    a = steepness, psi = evol_rate)
@

Function {\tt PEM.forcedSimple()} can actually
apply different weighting parameters to different edges, in spite
of what the adjective ``Simple'' in its name may suggest.

\subsection{PEM scores}

PEM scores are the values of target species on the eigenfunctions
underlying the PEM model. These scores are calculated from the graph locations
and a PEM object using function {\tt Locations2PEMscores()} as follows:

<<get_scores,echo=TRUE,eval=FALSE>>=
scores <- Locations2PEMscores(object = perissodactyla.PEM_opt2,
                              gsc = perissodactyla.loc)
@

The function is used internally by the {\tt predict} method for PEM
objects, and therefore need not be called when performing linear phylogenetic
modelling as exemplified above. It comes in handy when PEM analysis is
used together with other modelling approaches (e.g. multivariate regression
trees, linear discriminant analysis, artificial neural networks) that
have {\tt predict} methods that are not specially adapted for phylogenetic
modelling.

\subsection{Miscellaneous}

Package {\tt MPSEM} provides functions, some implemented in the {\tt C} language,
to simulate quantitative traits evolution by Ornstein-Uhlenbeck process
on potentially large phylogenies \citep{Butler2004}. These functions
are only useful to perform simulations, which is a rather advanced
topic beyond the scope of the present tutorial. Users can refer 
to the {\tt MPSEM} help files for further details.

In addition to function {\tt Phylo2DirectedGraph()}, which we examined 
previously, {\tt MPSEM} also has built-in graph manipulation
functions to populate a graph with vertices, add and remove vertices
and edges, etc. These functions were mainly intended to be called
internally by {\tt MPSEM} functions. They were made visible upon
loading the package because of their potential usefulness in some
advanced applications that are beyond the scope of the present tutorial.
Again, users are referred to the {\tt MPSEM} help files for details.

\bibliographystyle{apalike}
\addcontentsline{toc}{section}{\refname}\bibliography{PEM_with_MPSEM}

\end{document}
