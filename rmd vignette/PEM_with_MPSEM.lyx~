#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Phylogenetic modeling in R}
\end_preamble
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language canadian
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A phylogenetic modelling tutorial using Phylogenetic Eigenvector Maps (PEM)
 as implemented in R package MPSEM (
\begin_inset Formula $0.4$
\end_inset

-
\begin_inset Formula $2$
\end_inset

).
\end_layout

\begin_layout Author
Guillaume Gu√©nard
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Phylogenetic Eigenvector Maps (PEM) is a method to perform phylogenetic
 modelling.
 Phylogenetic modelling consists in modelling trait evolution and predicting
 trait values using phylogeny as an explanatory factor 
\begin_inset CommandInset citation
LatexCommand citep
key "Guenard2013"
literal "true"

\end_inset

.
 Phylogenetic modelling allows one to predict trait values when it is difficult
 or impractical to obtain them, for instance when species are rare, extinct,
 or when information is needed for several species and trait values are
 only available for a relatively small number of them 
\begin_inset CommandInset citation
LatexCommand citep
key "Guenard2011,Guenard2014"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
To apply phylogenetic modelling, one needs to have a set of species with
 known phylogeny and trait values (hereafter referred to as the 
\begin_inset Quotes eld
\end_inset

model species
\begin_inset Quotes erd
\end_inset

) as well as to know the locations, with respect to the phylogeny of the
 models species, of the species for which trait values are being predicted
 (hereafter referred to as the 
\begin_inset Quotes eld
\end_inset

target species
\begin_inset Quotes erd
\end_inset

).
 Phylogenetic modelling can be performed conjointly with trait correlation
 modelling: it is possible to use other traits with known (or estimable)
 values for the target species to help predict a trait of interest.
 Phylogenetic trees being acyclic graphs, I will hereby prefer terms belonging
 to the graph theory over terms phylogeneticists may be more familiar with.
 Therefore I will use 
\begin_inset Quotes eld
\end_inset

edge
\begin_inset Quotes erd
\end_inset

 over 
\begin_inset Quotes eld
\end_inset

branches
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

vertex
\begin_inset Quotes erd
\end_inset

 over 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

node
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

tip
\begin_inset Quotes erd
\end_inset

; safe in cases where I want to be specific about what a vertex represents.
\end_layout

\begin_layout Standard
The PEM work flow consists in 1) calculating the influence matrix of the
 graph, 2) specifying a model of trait evolution along the edges of the
 phylogenetic tree, 3) calculating the left eigenvectors of the weighted
 and centred influence matrix and 4) use these eigenvectors as descriptors
 
\begin_inset CommandInset citation
LatexCommand citep
key "Guenard2013"
literal "true"

\end_inset

.
 An 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt R}
\end_layout

\end_inset

 implementation of that approach is found in package 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 is meant to make the aforementioned process as seamless as possible.
 It is a work in progress; I welcome anyone to provide relevant suggestions
 and constructive remarks aimed at making 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 a better, more efficient and user-friendly, interface to phylogenetic modelling.
\end_layout

\begin_layout Standard
Assuming package 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 is installed, the first step to calculate a PEM is to load package 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

, which depends on packages 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt ape}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MASS}
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<load_package>>=
\end_layout

\begin_layout Plain Layout

library(MPSEM)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Preparing the data
\end_layout

\begin_layout Standard
For the present tutorial, we will use the data set 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt perissodactyla}
\end_layout

\end_inset

 from R package 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt caper}
\end_layout

\end_inset

.
 These data from 
\begin_inset CommandInset citation
LatexCommand citet
key "Purvis1995"
literal "true"

\end_inset

 are loaded into your 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt R}
\end_layout

\end_inset

 workspace as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<load_data>>=
\end_layout

\begin_layout Plain Layout

data(perissodactyla,package="caper")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt perissodactyla}
\end_layout

\end_inset

 data set contains 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt perissodactyla.tree}
\end_layout

\end_inset

, a phylogenetic tree encompassing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{length(perissodactyla.tree$tip.label)}
\end_layout

\end_inset

 odd-toed ungulate species:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<plot_phylogeny,echo=FALSE,fig.height=4.5>>=
\end_layout

\begin_layout Plain Layout

plot(perissodactyla.tree)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
as well as 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt perissodactyla.data}
\end_layout

\end_inset

, a data frame containing trait information about the species.
 For the present study we will model the 
\begin_inset Formula $\log_{10}$
\end_inset

 gestation weight as a function of phylogeny and 
\begin_inset Formula $\log_{10}$
\end_inset

 adult female weight:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<data_table,results="asis",echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(xtable)
\end_layout

\begin_layout Plain Layout

xtable(perissodactyla.data[,c(1L,2L,4L)])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before going any further, it is important to make sure that the species
 in the tree object are the same and presented in the same order as those
 in the data table.
 Glancing at the data table, species clearly cannot match since the latter
 feature information for only 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{nrow(perissodactyla.data)}
\end_layout

\end_inset

 of the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{length(perissodactyla.tree$tip.label)}
\end_layout

\end_inset

 species in the tree.
 We will therefore match the tip labels of the original tree in the data
 table using the binary (Latin) species names in a character vector 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt spmatch}
\end_layout

\end_inset

.
 When no matching element from the data table is found, an 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt NA}
\end_layout

\end_inset

 value appears at the corresponding position in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt spmatch}
\end_layout

\end_inset

.
 We can therefore use these 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt NA}
\end_layout

\end_inset

s to reference the species that can be dropped from the tree using 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt ape}
\end_layout

\end_inset

's function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt drop.tip()}
\end_layout

\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<droping_species>>=
\end_layout

\begin_layout Plain Layout

spmatch <- match(perissodactyla.tree$tip.label,
\end_layout

\begin_layout Plain Layout

                 perissodactyla.data[,1L])
\end_layout

\begin_layout Plain Layout

perissodactyla.tree <- drop.tip(perissodactyla.tree,
\end_layout

\begin_layout Plain Layout

                  perissodactyla.tree$tip.label[is.na(spmatch)])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now that the data match the tree in content, one needs to verify whether
 they do so in order.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<check_order>>=
\end_layout

\begin_layout Plain Layout

cbind(perissodactyla.tree$tip.label,perissodactyla.data[,1L])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since they do not, we need to recalculate 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt spmatch}
\end_layout

\end_inset

 with the new, reduced, tree and re-order the data accordingly.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<re-order_species>>=
\end_layout

\begin_layout Plain Layout

spmatch <- match(perissodactyla.tree$tip.label,
\end_layout

\begin_layout Plain Layout

                 perissodactyla.data[,1L])
\end_layout

\begin_layout Plain Layout

perissodactyla.data <- perissodactyla.data[spmatch,]
\end_layout

\begin_layout Plain Layout

all(perissodactyla.tree$tip.label==perissodactyla.data[,1L])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last code line is just a last check to guarantee that all species names
 are matching.
 As a last step before we are done with data manipulation, I will put the
 binary names in place of the row names and delete the table's first row:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<change_rownames>>=
\end_layout

\begin_layout Plain Layout

rownames(perissodactyla.data) <- perissodactyla.data[,1L]
\end_layout

\begin_layout Plain Layout

perissodactyla.data <- perissodactyla.data[,-1L]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Our data of interest now appear as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<re-arranged_data,results="asis",echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

xtable(perissodactyla.data[,c(1L,3L)])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, for the sake of demonstrating how to obtain predictions, we will
 remove the Sumatran rhinoceros (
\emph on
Dicerorhinus sumatrensis
\emph default
, the first species on top of the table) to obtain our training data set
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt perissodactyla.train}
\end_layout

\end_inset

, keep the withdrawn data as 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt perissodactyla.test}
\end_layout

\end_inset

, and calculate a tree without the target species:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<training_testing_datasets>>=
\end_layout

\begin_layout Plain Layout

perissodactyla.train <- perissodactyla.data[-1L,,drop=FALSE]
\end_layout

\begin_layout Plain Layout

perissodactyla.test <- perissodactyla.data[1L,,drop=FALSE]
\end_layout

\begin_layout Plain Layout

perissodactyla.tree.train <- drop.tip(perissodactyla.tree,
\end_layout

\begin_layout Plain Layout

                             tip="Dicerorhinus sumatrensis")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Calculating PEM
\end_layout

\begin_layout Subsection
Edge weighting function
\end_layout

\begin_layout Standard
As previously announced, I use the vocabulary of the graph theory when describin
g PEM: a tree is a (directed) graph, a branch is an edge, and the root,
 nodes, and tips are vertices.
 PEM allows one to specify a model of trait evolution along the edges of
 the tree.
 That model is given as a function having edge lengths as its first argument,
 followed by an arbitrary number of parameters provided as named arguments.
 Although PEM allows one to specify different parameter sets for different
 parts of the phylogeny as well as arbitrary weighting functions, the current
 implementation of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 (
\begin_inset Formula $0.3-6$
\end_inset

) only supports the following power function:
\begin_inset Formula 
\[
w_{a,\psi}(\phi_{j})=\begin{cases}
\psi\phi^{\frac{1-a}{2}} & \phi_{j}>0\\
0 & \phi_{j}=0,
\end{cases}
\]

\end_inset

where 
\begin_inset Formula $a$
\end_inset

 is the steepness parameter describing how abrupt the changes in trait values
 occur with time following branching, 
\begin_inset Formula $\psi$
\end_inset

 is the evolution rate of the trait, and 
\begin_inset Formula $\phi_{j}$
\end_inset

 is the length of edge 
\begin_inset Formula $j$
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<display_weighting,echo=FALSE,fig.height=5>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(4.5,4.5,1,7)+0.1)
\end_layout

\begin_layout Plain Layout

d <- seq(0,2,length.out=1000)
\end_layout

\begin_layout Plain Layout

a <- c(0,0.33,0.67,1,0.25,0.75,0)
\end_layout

\begin_layout Plain Layout

psi <- c(1,1,1,1,0.65,0.65,0.4)
\end_layout

\begin_layout Plain Layout

cc <- c(1,1,1,1,1,1,1)
\end_layout

\begin_layout Plain Layout

ll <- c(1,2,2,2,3,3,3)
\end_layout

\begin_layout Plain Layout

trial <- cbind(a,psi)
\end_layout

\begin_layout Plain Layout

colnames(trial) <- c("a","psi")
\end_layout

\begin_layout Plain Layout

ntrials <- nrow(trial)
\end_layout

\begin_layout Plain Layout

nd <- length(d)
\end_layout

\begin_layout Plain Layout

w <- matrix(NA,ntrials,nd,dimnames=list(paste("a=",trial[,"a"],", psi=",trial[,"
psi"],sep=""),
\end_layout

\begin_layout Plain Layout

                                        paste("d=",round(d,4),sep="")))
\end_layout

\begin_layout Plain Layout

for(i in 1:ntrials)
\end_layout

\begin_layout Plain Layout

  w[i,] <- MPSEM::PEMweights(d,trial[i,"a"],trial[i,"psi"])
\end_layout

\begin_layout Plain Layout

plot(NA,xlim=c(0,2),ylim=c(0,1.6),ylab=expression(paste(italic(w[list(italic(a),p
si)]),~(phi))),
\end_layout

\begin_layout Plain Layout

  xlab=expression(paste("Distance (",italic(phi),")",sep="")),axes=FALSE)
\end_layout

\begin_layout Plain Layout

axis(1,at=seq(0,2,0.5),label=seq(0,2,0.5))
\end_layout

\begin_layout Plain Layout

axis(2,las=1)
\end_layout

\begin_layout Plain Layout

text(expression(paste(~~~a~~~~~~~psi)),x=2.2,y=1.57,xpd=TRUE,adj=0)
\end_layout

\begin_layout Plain Layout

for(i in 1:ntrials) {
\end_layout

\begin_layout Plain Layout

  lines(x=d,y=w[i,],col=cc[i],lty=ll[i])
\end_layout

\begin_layout Plain Layout

  text(paste(sprintf("%.2f",trial[i,1]),sprintf("%.2f",trial[i,2]),sep=" 
 "),
\end_layout

\begin_layout Plain Layout

       x=rep(2.2,1),y=w[i,1000],xpd=TRUE,adj=0)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

rm(d,a,psi,cc,ll,trial,ntrials,nd,w,i)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Values of the edge weighting function used as a model of trait evolution
 by 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 for different values of steepness (
\begin_inset Formula $a$
\end_inset

) and evolution rate (
\begin_inset Formula $\psi$
\end_inset

).
\begin_inset CommandInset label
LatexCommand label
name "fig:Edge-weighting-function"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Guenard2013"
literal "true"

\end_inset

.
 As the steepness parameter increases, the weight assigned to a given edge
 increases more sharply with respect to the phylogenetic distance (or evolutiona
ry time; Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Edge-weighting-function"

\end_inset

).
 In the context of PEM, the edge weight represent the relative rate of evolution
 of the trait; the greater the edge weight, the greater the trait change
 along that edge.
 When 
\begin_inset Formula $a=0$
\end_inset

, trait evolution is neutral and therefore proceeds by random walk along
 edges.
 When 
\begin_inset Formula $a=1$
\end_inset

, edge weights no longer increase as a function of edge lengths.
 That situation corresponds to the scenario in which trait evolution is
 driven by the strongest possible natural selection: following a speciation
 event, trait either change abruptly (directional selection) at the vertex
 or do not change at all (stabilizing selection).
\end_layout

\begin_layout Subsection
Phylogenetic graph
\end_layout

\begin_layout Standard
The first step to build a PEM is to convert the phylogenetic tree.
 The is done by giving the tree to function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt Phylo2DirectedGraph()}
\end_layout

\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<convert_to_graph>>=
\end_layout

\begin_layout Plain Layout

perissodactyla.pgraph <- 
\end_layout

\begin_layout Plain Layout

               Phylo2DirectedGraph(perissodactyla.tree.train)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here's a snipet showing how 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

's graph container stores graph information:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<graph_storage,echo=FALSE,size="tiny">>=
\end_layout

\begin_layout Plain Layout

str(perissodactyla.pgraph)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is a list of two elements themselves being two lists.
 The element 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt 
\backslash
$edge}
\end_layout

\end_inset

 is a list containing information about the graph's edges, namely the indices
 of their origin and destination vertices (the two first unnamed elements)
 and an arbitrary number of supplementary elements storing other edge properties.
 In the present case, a numeric vector created by 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt Phylo2DirectedGraph()}
\end_layout

\end_inset

 and called 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt 
\backslash
$distance}
\end_layout

\end_inset

 stores the phylogenetic distances (
\begin_inset Formula $\phi_{j}$
\end_inset

), which correspond to the branch lengths of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt perissodactyla.tree}
\end_layout

\end_inset

.
 The element 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt 
\backslash
$vertex}
\end_layout

\end_inset

 is a list containing an arbitrary number of elements storing vertex properties.
 In the present case, a logical vector created by 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt Phylo2DirectedGraph()}
\end_layout

\end_inset

 and called 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt 
\backslash
$species}
\end_layout

\end_inset

 stores whether a given vertex represents a species (i.e., it is a tip).
 In addition to edge and vertex information, the container stores other
 useful information in the form of attributes: 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt ev}
\end_layout

\end_inset

 stores the number of edges and vertices whereas 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt elabel}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt vlabel}
\end_layout

\end_inset

 store edge and vertex labels, respectively.
\end_layout

\begin_layout Subsection
Building the eigenvector map
\end_layout

\begin_layout Standard
In 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

, PEM are build using function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.build()}
\end_layout

\end_inset

.
 As an example, let us assume that the steepness and evolution rate are
 
\begin_inset Formula $a=0.25$
\end_inset

 and 
\begin_inset Formula $\psi=2$
\end_inset

 among genus 
\emph on
Equus
\emph default
, 
\begin_inset Formula $a=0.8$
\end_inset

 and 
\begin_inset Formula $\psi=0.5$
\end_inset

 among genus 
\emph on
Tapirus
\emph default
, and 
\begin_inset Formula $a=0$
\end_inset

 and 
\begin_inset Formula $\psi=1$
\end_inset

 from the root of the tree up to the vertex where the two latter genera
 begin as well as among the other genera.
 The following figure will help us figure out the indices of the edges involved:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<tree_labelled,fig.height=5>>=
\end_layout

\begin_layout Plain Layout

tree <- perissodactyla.tree.train
\end_layout

\begin_layout Plain Layout

tree$node.label <- paste("N",1L:tree$Nnode)
\end_layout

\begin_layout Plain Layout

plot(tree,show.node.label=TRUE)
\end_layout

\begin_layout Plain Layout

edgelabels(1L:nrow(tree$edge),
\end_layout

\begin_layout Plain Layout

           edge=1L:nrow(tree$edge),bg="white",cex=0.75)
\end_layout

\begin_layout Plain Layout

rm(tree)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Hence, 
\begin_inset Formula $a=0.25$
\end_inset

 and 
\begin_inset Formula $\psi=2$
\end_inset

 for edges 
\begin_inset Formula $15-21$
\end_inset

, 
\begin_inset Formula $a=0.8$
\end_inset

 and 
\begin_inset Formula $\psi=0.5$
\end_inset

 for edges 
\begin_inset Formula $10-13$
\end_inset

, and 
\begin_inset Formula $a=0$
\end_inset

 and 
\begin_inset Formula $\psi=1$
\end_inset

 for edges 
\begin_inset Formula $1-9$
\end_inset

 and 
\begin_inset Formula $14$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<set_param>>=
\end_layout

\begin_layout Plain Layout

steepness <- rep(0,attr(perissodactyla.pgraph,"ev")[1L])
\end_layout

\begin_layout Plain Layout

evol_rate <- rep(1,attr(perissodactyla.pgraph,"ev")[1L])
\end_layout

\begin_layout Plain Layout

steepness[15L:21] <- 0.25
\end_layout

\begin_layout Plain Layout

evol_rate[15L:21] <- 2
\end_layout

\begin_layout Plain Layout

steepness[9L:13] <- 0.8
\end_layout

\begin_layout Plain Layout

evol_rate[9L:13] <- 0.5
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The PEM is obtained as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<calculate_PEM>>=
\end_layout

\begin_layout Plain Layout

perissodactyla.PEM <- PEM.build(perissodactyla.pgraph,
\end_layout

\begin_layout Plain Layout

                                d="distance",sp="species",
\end_layout

\begin_layout Plain Layout

                                a=steepness,psi=evol_rate)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In addition to the phylogenetic graph, function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.build()}
\end_layout

\end_inset

 needs 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt d}
\end_layout

\end_inset

, the name of the edge property where the phylogenetic distances are stored,
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt sp}
\end_layout

\end_inset

, the name of the vertex property specifying what vertex is a species, as
 well as the user-specified steepness and evolution rate.
 When the vectors given to 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt a}
\end_layout

\end_inset

 or 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt psi}
\end_layout

\end_inset

, have smaller sizes then the number of edges, values are recycled.
 The default values for 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt d}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt sp}
\end_layout

\end_inset

 are those produced by 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt Phylo2DirectedGraph()}
\end_layout

\end_inset

, and can therefore be omitted in most cases.
 The object that 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

's use to store PEM information is rather complex and we will hereby not
 browse through it.
 Method 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt as.data.frame}
\end_layout

\end_inset

 can be used to extract the eigenvector from a PEM.
 For a set of 
\begin_inset Formula $n$
\end_inset

 species, that method returns a matrix encompassing 
\begin_inset Formula $n-1$
\end_inset

 column vectors that can be used in model to represent phylogenetic structure
 in traits.
 Here the phylogenetic patterns of variation described by two eigenvectors
 of the PEM we calculated above:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<Eigenvector_example,fig.height=3.5,fig.width=4.5>>=
\end_layout

\begin_layout Plain Layout

layout(matrix(c(1,1,1,2,2,3,3),1L,7L))
\end_layout

\begin_layout Plain Layout

par(mar=c(5.1,2.1,4.1,2.1))
\end_layout

\begin_layout Plain Layout

plot(perissodactyla.tree.train,x.lim=60,cex=0.75)
\end_layout

\begin_layout Plain Layout

plot(y = 1L:nrow(perissodactyla.train), ylab="", xlab = "Loading",
\end_layout

\begin_layout Plain Layout

     x = as.data.frame(perissodactyla.PEM)[,1L], xlim=0.5*c(-1,1),
\end_layout

\begin_layout Plain Layout

     axes=FALSE, main = expression(bold(v)[1]))
\end_layout

\begin_layout Plain Layout

axis(1) ; abline(v=0)
\end_layout

\begin_layout Plain Layout

plot(y = 1L:nrow(perissodactyla.train), ylab="", xlab = "Loading",
\end_layout

\begin_layout Plain Layout

     x = as.data.frame(perissodactyla.PEM)[,5L], xlim=0.5*c(-1,1),
\end_layout

\begin_layout Plain Layout

     axes=FALSE, main = expression(bold(v)[5]))
\end_layout

\begin_layout Plain Layout

axis(1) ; abline(v=0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The pattern shown by the first eigenvector essentially contrasts Equids
 and the other odd-toed ungulate species whereas the pattern shown by the
 second eigenvector essentially contrasts tapirs and Rhinocerotids.
\end_layout

\begin_layout Subsection
Estimate weighting parameters empirically
\end_layout

\begin_layout Standard
Because users do often not have information about the best set of weighting
 function parameters to use for modelling, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 as has a function called 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.fitSimple()}
\end_layout

\end_inset

 that allows them to empirically estimate a single value of parameter 
\begin_inset Formula $a$
\end_inset

 for the whole phylogeny
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.fitSimple()}
\end_layout

\end_inset

 does not estimate parameter 
\begin_inset Formula $\psi$
\end_inset

 because the latter has no effect when its value is assumed to be constant
 throughout the phylogeny.
\end_layout

\end_inset

 using restricted maximum likelihood
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A function to estimate different sets of weighting function parameters for
 different portions of the phylogeny has yet to be included in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

.
\end_layout

\end_inset

.
 That function requires a response variable that will be used to optimize
 the steepness parameter (here the 
\begin_inset Formula $\log_{10}$
\end_inset

 neonate weight) as well as lower and upper bounds for the admissible parameter
 values and is called as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<PEM_opt1>>=
\end_layout

\begin_layout Plain Layout

perissodactyla.PEM_opt1 <- PEM.fitSimple(
\end_layout

\begin_layout Plain Layout

                     y = perissodactyla.train[,"log.neonatal.wt"],
\end_layout

\begin_layout Plain Layout

                     x = NULL,
\end_layout

\begin_layout Plain Layout

                     w = perissodactyla.pgraph,
\end_layout

\begin_layout Plain Layout

                     d = "distance", sp="species",
\end_layout

\begin_layout Plain Layout

                     lower = 0, upper = 1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If other traits are to be used in the model (here the 
\begin_inset Formula $\log_{10}$
\end_inset

 female weight), they are passed to the parameter 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt x}
\end_layout

\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<PEM_opt2>>=
\end_layout

\begin_layout Plain Layout

perissodactyla.PEM_opt2 <- PEM.fitSimple(
\end_layout

\begin_layout Plain Layout

                     y = perissodactyla.train[,"log.neonatal.wt"],
\end_layout

\begin_layout Plain Layout

                     x = perissodactyla.train[,"log.female.wt"],
\end_layout

\begin_layout Plain Layout

                     w = perissodactyla.pgraph,
\end_layout

\begin_layout Plain Layout

                     d = "distance", sp="species",
\end_layout

\begin_layout Plain Layout

                     lower = 0, upper = 1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The results of the latter calls are PEMs similar to that obtained using
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.build()}
\end_layout

\end_inset

, with additional information resulting from the optimization process.
 It is noteworthy that estimates of the steepness parameter (stored as element
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt 
\backslash
$optim
\backslash
$par}
\end_layout

\end_inset

 of the PEM objects) and, consequently, the resulting phylogenetic eigenvectors,
 will be different depending on the use of auxiliary traits.
 In the example above, for instance, 
\begin_inset Formula $a$
\end_inset

 was estimated to 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{round(perissodactyla.PEM_opt1$optim$par,2)}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.fitSimple()}
\end_layout

\end_inset

 when no auxiliary trait is involved (first call) and to 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{round(perissodactyla.PEM_opt2$optim$par,2)}
\end_layout

\end_inset

 when the female weight is used as an auxiliary trait (second call).
\end_layout

\begin_layout Subsection
Phylogenetic modelling
\end_layout

\begin_layout Standard
To model trait values, PEM are used as descriptors in other modelling method.
 any suitable method can be used.
 For instance, package 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 contains a utility function called 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt lmforwardsequentialAICc()}
\end_layout

\end_inset

 that does step-wise variable addition in multiple regression analysis on
 the basis of the corrected Akaike Information Criterion (AICc; 
\begin_inset CommandInset citation
LatexCommand citealp
key "Hurvich1993"
literal "true"

\end_inset

):
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<build_PEM_models>>=
\end_layout

\begin_layout Plain Layout

lm1 <- lmforwardsequentialAICc(
\end_layout

\begin_layout Plain Layout

                     y = perissodactyla.train[,"log.neonatal.wt"],
\end_layout

\begin_layout Plain Layout

                     object = perissodactyla.PEM_opt1)
\end_layout

\begin_layout Plain Layout

summary(lm1)
\end_layout

\begin_layout Plain Layout

lm2 <- lmforwardsequentialAICc(
\end_layout

\begin_layout Plain Layout

            y = perissodactyla.train[,"log.neonatal.wt"],
\end_layout

\begin_layout Plain Layout

            x = perissodactyla.train[,"log.female.wt",drop=FALSE],
\end_layout

\begin_layout Plain Layout

            object = perissodactyla.PEM_opt2)
\end_layout

\begin_layout Plain Layout

summary(lm2) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice that to pass a single auxiliary trait to 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt lmforwardsequentialAICc()}
\end_layout

\end_inset

 in the current version of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

, it is mandatory to set 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt drop=FALSE}
\end_layout

\end_inset

 to the bracket operator so that the variable name be conserved.
 Failure to do so will preclude one to make predictions using the resulting
 linear model.
 To obtain predictions, we need to calculate the locations of the target
 species with respect to the phylogeny of the model species.
 This is accomplished by 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt getGraphLocations()}
\end_layout

\end_inset

, to which we give the tree for all species (model + targets) and the names
 (or indices) of the target species.
 Then, we use the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt predict()}
\end_layout

\end_inset

 method for PEM objects.
 The latter takes, in addition to the PEM object, the locations of the target
 species as obtained by 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt getGraphLocations()}
\end_layout

\end_inset

, an lm (or glm) object involving the eigenvectors of the PEM, and a table
 of auxiliary trait values for the target species, which can be omitted
 if no auxiliary trait is present in the linear model.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<make_prediction>>=
\end_layout

\begin_layout Plain Layout

perissodactyla.loc <- getGraphLocations(perissodactyla.tree,
\end_layout

\begin_layout Plain Layout

                              targets="Dicerorhinus sumatrensis")
\end_layout

\begin_layout Plain Layout

pred <- predict(object=perissodactyla.PEM_opt2,
\end_layout

\begin_layout Plain Layout

                targets=perissodactyla.loc,
\end_layout

\begin_layout Plain Layout

                lmobject=lm2,
\end_layout

\begin_layout Plain Layout

                newdata=perissodactyla.test,
\end_layout

\begin_layout Plain Layout

                "prediction",0.95)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, the predicted neonatal weight for the Sumatran rhinoceros is 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{round((10^pred$values)/1000,1)}
\end_layout

\end_inset


\begin_inset Formula $\,\mathrm{kg}$
\end_inset

 and the bounds of the 
\begin_inset Formula $95\%$
\end_inset

 prediction interval are 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{round((10^pred$lower)/1000,1)}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{round((10^pred$upper)/1000,1)}
\end_layout

\end_inset


\begin_inset Formula $\,\mathrm{kg}$
\end_inset

, while the observed value was actually 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{round((10^perissodactyla.test$log.neonatal.wt)/1000,1)}
\end_layout

\end_inset


\begin_inset Formula $\,\mathrm{kg}$
\end_inset

.
\end_layout

\begin_layout Section
Cross-validating PEM predictions
\end_layout

\begin_layout Standard
Here, I will show you how to perform a leave-one-out cross-validation of
 a data set using the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt R}
\end_layout

\end_inset

 code from the previous two sections.
 Predictions will be added to table 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt perissodactyla.data}
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<cross-validation>>=
\end_layout

\begin_layout Plain Layout

perissodactyla.data <- data.frame(perissodactyla.data,
\end_layout

\begin_layout Plain Layout

                         predictions = NA, lower = NA, upper = NA)
\end_layout

\begin_layout Plain Layout

jackinfo <- list()
\end_layout

\begin_layout Plain Layout

for(i in 1L:nrow(perissodactyla.data)) {
\end_layout

\begin_layout Plain Layout

  jackinfo[[i]] <- list()
\end_layout

\begin_layout Plain Layout

  jackinfo[[i]][["loc"]] <- getGraphLocations(perissodactyla.tree,
\end_layout

\begin_layout Plain Layout

                       targets = rownames(perissodactyla.data)[i])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  jackinfo[[i]][["PEM"]] <- PEM.fitSimple(
\end_layout

\begin_layout Plain Layout

                    y = perissodactyla.data[-i,"log.neonatal.wt"],
\end_layout

\begin_layout Plain Layout

                    x = perissodactyla.data[-i,"log.female.wt"],
\end_layout

\begin_layout Plain Layout

                    w = jackinfo[[i]][["loc"]]$x)
\end_layout

\begin_layout Plain Layout

  jackinfo[[i]][["lm"]] <- lmforwardsequentialAICc(
\end_layout

\begin_layout Plain Layout

           y = perissodactyla.data[-i,"log.neonatal.wt"],
\end_layout

\begin_layout Plain Layout

           x = perissodactyla.data[-i,"log.female.wt",drop=FALSE],
\end_layout

\begin_layout Plain Layout

           object = jackinfo[[i]][["PEM"]])
\end_layout

\begin_layout Plain Layout

  predictions <- predict(object = jackinfo[[i]][["PEM"]],
\end_layout

\begin_layout Plain Layout

      targets = jackinfo[[i]][["loc"]],
\end_layout

\begin_layout Plain Layout

      lmobject = jackinfo[[i]][["lm"]],
\end_layout

\begin_layout Plain Layout

      newdata = perissodactyla.data[i,"log.female.wt",drop=FALSE],
\end_layout

\begin_layout Plain Layout

      "prediction",0.95)
\end_layout

\begin_layout Plain Layout

  perissodactyla.data[i, c("predictions", "lower", "upper")] <-
\end_layout

\begin_layout Plain Layout

                      unlist(predictions)
\end_layout

\begin_layout Plain Layout

} ; rm(i, predictions)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because the result of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt getGraphLocations()}
\end_layout

\end_inset

 includes the phylogenetic graph with the target species removed has its
 element 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt 
\backslash
$x}
\end_layout

\end_inset

, it is not necessary to re-calculate the tree with the target species dropped
 and the phylogenetic graph as we did previously for explanatory purposes.
 Also, I suggest storing the internal information about each cross-validation
 steps into a list (hereby called 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt jackinfo}
\end_layout

\end_inset

), so it is possible to access the many details of the analyses later on.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<plot_pred_obs,echo=FALSE,fig.height=4,fig.width=4>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(5,5,2,2)+0.1)
\end_layout

\begin_layout Plain Layout

rng <- range(perissodactyla.data[,"log.neonatal.wt"], perissodactyla.data[,c("predic
tions","lower","upper")])
\end_layout

\begin_layout Plain Layout

plot(NA, xlim = rng, ylim = rng, xlab = "Predicted", ylab = "observed",
 asp = 1, las = 1)
\end_layout

\begin_layout Plain Layout

points(x = perissodactyla.data[,"predictions"], y = perissodactyla.data[,"log.neona
tal.wt"])
\end_layout

\begin_layout Plain Layout

abline(0,1)
\end_layout

\begin_layout Plain Layout

arrows(x0 = perissodactyla.data[,"lower"],x1 = perissodactyla.data[,"upper"],
\end_layout

\begin_layout Plain Layout

       y0 = perissodactyla.data[,"log.neonatal.wt"],
\end_layout

\begin_layout Plain Layout

       y1 = perissodactyla.data[,"log.neonatal.wt"],
\end_layout

\begin_layout Plain Layout

       length = 0.05,angle = 90,code = 3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Predicted and observed 
\begin_inset Formula $\log_{10}$
\end_inset

 neonatal body mass for 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{nrow(perissodactyla.data)}
\end_layout

\end_inset

 odd-toed ungulate species.
\begin_inset CommandInset label
LatexCommand label
name "fig:Predicted-and-observed"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 From the present cross-validation, we found that the (
\begin_inset Formula $\log$
\end_inset

) neonatal body mass can be predicted with a cross-validated 
\begin_inset Formula $R^{2}$
\end_inset

 of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Sexpr{round(1-(sum((perissodactyla.data[,"predictions"]-perissodactyla.data[,"log.n
eonatal.wt"])**2)/nrow(perissodactyla.data))/var(perissodactyla.data[,"log.neonatal.w
t"]),2)}
\end_layout

\end_inset

 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Predicted-and-observed"

\end_inset

).
\end_layout

\begin_layout Section
Other utility functions
\end_layout

\begin_layout Subsection
Influence matrix
\end_layout

\begin_layout Standard
The influence matrix is used internally to calculate PEM.
 It is a matrix having as many rows as the number of vertices (species +
 nodes) and as many columns as the number of edges.
 Any given element of the influence matrix is coding whether a vertex, which
 is represented a row of the matrix is influenced an edge, which is represented
 by a column of the matrix.
 In the context of PEM, a vertex is influenced by an edge when the former
 has ancestors on the latter or, in other words, when an edge is on the
 path leading from a tip to the root of the tree.
 The influence matrix is obtained as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<influence_matrix,echo=TRUE,eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

res <- PEMInfluence(perissodactyla.pgraph)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Update and forced PEM parameters
\end_layout

\begin_layout Standard
The calculation of the influence matrix performed by 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.build()}
\end_layout

\end_inset

 for a given phylogenetic graph need not be done every time new weighting
 function parameters are to be tried.
 For that reason, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 provides a function called 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.updater()}
\end_layout

\end_inset

 that takes a previously calculated PEM object, applies new edge weighting,
 and recalculates the phylogenetic eigenvectors:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<PEM_updater,echo=TRUE,eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

res <- PEM.updater(object = perissodactyla.PEM, a = 0, psi = 1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The result of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.build()}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.updater()}
\end_layout

\end_inset

 does not contain all the information necessary to predict trait values.
 Hence, neither of these functions is given information about the response
 variable and auxiliary traits.
 To perform these preliminary calculations, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 provides the user with function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.forcedSimple()}
\end_layout

\end_inset

 that produce the same output as 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.fitSimple()}
\end_layout

\end_inset

 with user-provided values of weighting parameters.
 It is called as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<forcedSimple,echo=TRUE,eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

res <- PEM.forcedSimple(
\end_layout

\begin_layout Plain Layout

                    y = perissodactyla.train[,"log.neonatal.wt"],
\end_layout

\begin_layout Plain Layout

                    x = perissodactyla.train[,"log.female.wt"],
\end_layout

\begin_layout Plain Layout

                    w = perissodactyla.pgraph,
\end_layout

\begin_layout Plain Layout

                    a = steepness, psi = evol_rate)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is noteworthy that function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt PEM.forcedSimple()}
\end_layout

\end_inset

 can actually apply different weighting parameters for different edges,
 in spite of what the adjective 
\begin_inset Quotes eld
\end_inset

Simple
\begin_inset Quotes erd
\end_inset

 in its name may suggest.
\end_layout

\begin_layout Subsection
PEM scores
\end_layout

\begin_layout Standard
PEM scores are the values of target species on the eigenfunctions underlying
 the PEM.
 These scores are calculated from the graph locations and a PEM object using
 function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt Locations2PEMscores()}
\end_layout

\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<get_scores,echo=TRUE,eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

scores <- Locations2PEMscores(object = perissodactyla.PEM_opt2,
\end_layout

\begin_layout Plain Layout

                              gsc = perissodactyla.loc)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function is used internally by the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt predict}
\end_layout

\end_inset

 method for PEM objects, and therefore need not be called when performing
 linear phylogenetic modelling as exemplified above.
 It comes in handy when the PEM is used together with other modelling approaches
 (e.g.
 multivariate regression trees, linear discriminant analysis, artificial
 neural networks) that have 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt predict}
\end_layout

\end_inset

 methods that are not specially adapted for phylogenetic modelling.
\end_layout

\begin_layout Subsection
Miscellaneous
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 comes with functions, some implemented in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt C}
\end_layout

\end_inset

 language, to simulate quantitative traits evolution by Ornstein-Uhlenbeck
 process on potentially large phylogenies 
\begin_inset CommandInset citation
LatexCommand citep
key "Butler2004"
literal "true"

\end_inset

.
 These functions are only useful to perform simulations, which is a rather
 advanced matter outside the scope of the present tutorial.
 I refer the user to 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

's help files for further details.
\end_layout

\begin_layout Standard
In addition to function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt Phylo2DirectedGraph()}
\end_layout

\end_inset

, which we have seen previously 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

 also has built-in graph manipulation functions to populate a graph with
 vertices, add and remove vertices and edges, etc.
 These functions were mainly intended to be called internally by 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

's functions.
 They were made visible upon loading the package because of their potential
 usefulness to some advanced applications that are outside the scope of
 the present tutorial.
 Again, I refer the user to 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\backslash
tt MPSEM}
\end_layout

\end_inset

's help files for further details.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "PEM_with_MPSEM"
options "bibtotoc,apalike"

\end_inset


\end_layout

\end_body
\end_document
